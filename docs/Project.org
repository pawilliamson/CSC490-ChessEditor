#+TITLE: Chess Editor
#+TAGS: @DeMO @pizzaza @Tyler @Dakota @pawilliamson
* Project Definition TODO
** Revised 
Devin's:
Chess is a game that has been played by millions since its
conception. It is a game that has relatively simple rules that make it
which make it a game that has been sort of a standard for testing the
computation abilility of automata. Although they have become advanced
enough where chess is no longer sufficient, we feel it is still a good
start for ones' ability. The goal of this project is to develop a
chess application using the Angular framework and test some concepts
that we are interested in, such as User Authentication with Google
Identity and Implementation of an Open-Source Standard like the
Unified Chess Interface; with an added bonus of trying to wrangle with
an External Web Server with Multiplayer.

** Original
People like Chess and need a way to quickly develop and practice new strategies. I love
Chess!!! Chess Editor will let people play Chess on their PC and set up the board the
way they want to test different strategies, or just play in a different way. It will support
playing against an AI, or playing against another person locally. It will include an account
system to track wins and losses. For the purposes of testing, there will be an undo and
redo button, as well as tools to set up specific board scenarios. It will be programmed in
Typescript and we will use Stockfish for the AI.


* Project Requirements
** Functional 
*** Primary Requirements
    The primary requirements of functionality for *Chess Editor*  include:
    - Ability for the user to play an online game of chess with
      another user, or alternatively against *AI* that will be
      provided.
    - Ability for the user to track their *statistics* of play over
      the life of their account; such as:
      - Wins
      - Losses
      - Draws
    - Ability for the user to modify the starting layout of the chess
      pieces to match the configuration of either a previously ongoing
      game or a chess scenario (i.e., a game that started offline).
*** Secondary Requirements
    The secondary scope of functionality for Chess Editor include:
    - Ability for the end user to create an account to access features
    - Ability for the end user to login via their Google Account credentials.
*** Optional Requirements
** Usability
*** User Interface
    The user interface of the application must not be obtrusive and
    needs to be adapted for mobile devices.
*** Performance
    The performance of the application must not interfere with other
    processes on the users system.
** System
*** Hardware
**** Severside
     All server-side requirments will be provided by the hosting site: ecowebhosting.co.uk
**** Clientside
     The application will require hardware capable of running a modern web-brower without difficulty.
*** Software
**** Clientside
     The application will require a modern web-browser.
**** Serverside
     The server will require the database and networking software required of a web server.
*** Database                                                         :Verify:
    This project will have one database which is used to keep track of
    on-going games. This is specifically MySQL version 10.4.14.

** Networking
   All project artifacts and interconnectivities are provided by the
   hosting server.
** Security
   For Google Authentication, we will be leveraging the Google OAuth
   2.0 API. The other security requirements are inherently provided by
   the hosting server.
* Project Specification
** Focus 
   This project has a focus on developing experience with Angular and
   with a client-server application. This project will attempt to utilize
   open-source projects when it is reasonably possible.

** Development Environemnt
*** Libraries
    This project will be using the Google Identity API for user Authentication.
*** Frameworks
    This project will be developed using the Angular framework (11.1.2)
    with TypeScript.
** Platform
   This project is going to be web-based application,
** Genre
   This project is considered as an online board game.
* System Design
** Subsystem Identification
   We will be leveraging our MySQL database engine to create, update,
   read, and delete user information.
   Google Identity will also be used to facilitate account creation
   with a user's exsisting Google account.
*** Chess Gameplay
    The MySQL database engine will be used for tracking gameplay
    metrics.
    The Angular framework will be implemented with TypeScript to
    manage the gameplay logic and for validation of chess scenarios.
    The Stockfish AI framework will be used to respond to the end
    player's movement when playing against the "computer".
*** Subsystem Communication
    The player will interact with the Chess UI with their keyboard and
    mouse. The player will notice a response from the UI with their
    monitor. The system should have proper UI responses indicating a
    success/failure of the attempted action.
*** Sequence Diagram                                                  :@DeMO:
    [[file:present/Sequence1.png]]
    [[file:present/Sequence2.png]]
    [[file:present/Sequence3.png]]
*** Use-Case Diagram
    
*** Class Diagram                        :@Dakota:@Tyler:@DeMO:@pawilliamson:
[[file:present/ClassDiagram.png]]
*** Entity Relationship Model (E-R Model)
[[file:present/ERDiagram.png]]
[[https://lucid.app/lucidchart/b4d167c8-e8fa-475e-9e63-86c4e3aed414/view?page=0_0#]]
** Design
*** Mock-up Diagram
*** Color Schemes
*** Additional Comments
    We will be using Bootstrap framewwork.
** Sub-System Communication
*** Controls
*** I/O
*** Dataflow                                                         :@Tyler:
** Entity Relationship Model (E-R Model)
** Overall operation - System Model\
*** Account Creation Management
    The user will modify their account information via the Chess Game
    UI that will be fed into their respective records in the database.
*** Chess Gameplay Management
    Gameplay metrics will be automatically tracked by the Chess Game
    UI in tandem with pre-existing records stored in the MYSQL
    database.
    Gameplay involvng the "computer" will be handled by the Stockfish
    AI program to determine the next best move.
    [[https://lucid.app/lucidchart/invitations/accept/18b1143a-20e9-441c-ac34-2c95f7a2d031]]
* TODO System Analysis
** Subsystems
- Account Creation/Management
- Chess Gameplay Management
** System (Tables and Description)
*** Data Dictionary
| Table | Column             | Data Type                     | Description                   |
|-------+--------------------+-------------------------------+-------------------------------|
| User  | userID (Pky)       | int                           | UUid of user                  |
|       | firstName          | varchar                       | User's first name             |
|       | lastName           | varchar                       | User's last name              |
|       | wins               | int                           | Number of user's wins         |
|       | losses             | int                           | Number of user's losses       |
|       | activeGameID (fky) | int                           | UUID of currently active game |
| Game  | gameID (Pky)       | int                           | UUID of current game session  |
|       | turnList           | List<Peice, Integer, Integer> | UUID of recorded turn         |
|       | playerOne (fky)    | int                           | UUID of player one (white)    |
|       | playerTwo (fky)    | int                           | UUID of player two (black)    |
*** Process Models
[[file: present/ProcessModel.png]]
[[https://lucid.app/lucidchart/7d69e18e-721a-43ad-a77d-83df4e8d1f3a/view?page=0_0#]]
** Algorithm Analysis
*** Big-O Analysis
    We expect that the game when not playing with an AI will run in
    constant time as there is nothing in our current algorithms that
    will execute a variable number of times. This will probably change
    when the AI is implemented.

* TODO Project Scrum Report
** Overall
** Product Backlog
** Sprint Backlog
** Burndown Chart
** Sprint 1
   Sprint 1 began on January 22, 2021 and continued to Febuary
   6, 2021. The period lasted one day longer than the allocated duration.
*** Scrum 
    During sprint, two scrum meetings took place
    - January 28, 2021: Discussed the framework of the project and
      decided to use Angular. Discussed the scope of the project and
      decided to be a web application. Discussed authentication
      services for the server.
    - February 4, 2021: Discussed some work that was done since the
      previous scrum; includes diagrams and investigations of Google
      Authentication viability for the server.
      
      | Item                  | Created BY  | Date     | Status                                   |
      | Project Definition    | dobrienUNCG | 01/21/21 | Completed by pizzaza                     |
      | Project requirements  | dobrienUNCG | 01/21/21 | Completed during Scrums 1 and 2 by group |
      | Identify subsystems   | dobrienUNCG | 01/21/21 | Moved to Sprint 2 backlog                |
      | Project Specification | dobrienUNCG | 01/21/21 | Moved to sprint 2 backlog                |

* TODO Subsystems [/]
** TODO Chess Game [0/7]                                     :@Tyler:@Dakota:
*** TODO Initial Design and Model
*** TODO Data Dictionary
*** TODO Revisions (Refinement)
*** TODO Scrum Backlog
    | Task                           | On | Assigned To   | Completed On |
    | ---------------------------    | -- | ------------  | -----------  |
    | Generate Chessboard            |    | Tyler, Dakota |              |
    | Chess Pieces                   |    |               |              |
    | Movement                       |    |               |              |
    | Movement and player interfaces |    |               |              |
    | Display Board                  |    |               |              |
    | Drag and move piece`           |    |               |              |
    | Validate Moves                 |    |               |              |
    | Detect Check                   |    |               |              |
    | Detect Win                     |    |               |              |
**** TODO User Story Categories                                       :@DeMO:
*** TODO Coding
****  Language
*** TODO User Training
*** TODO Testing
** TODO User Authentication [0/7]                             :@pawilliamson:
*** TODO Initial Design and Model
*** TODO Data Model
*** TODO Refinement
*** TODO Scrum Backlog
**** TODO User Story Categories                                       :@DeMO:
*** TODO Coding
*** TODO User Training
*** TODO Testing
** TODO Server - Client [0/7]                                        :@Tyler:
*** TODO Initial Design and Model
*** TODO Data Dictionary
*** TODO Refinement
*** TODO Scrum Backlog
*** TODO Coding
*** TODO User Training
*** TODO Testing
** TODO Computer Opponent  [0/7]                                      :@DeMO:
*** TODO Initial Design and Model
*** TODO Data Dictionary
*** TODO Refinement
*** TODO Scrum Backlog
**** TODO User Story Categories
*** TODO Coding
*** TODO User Training
*** TODO Testing
* TODO Complete System
** TODO Final Product
** TODO Source code and user manual + Technical Report
*** TODO GitHub
** TODO Evaluation by client and instructor

** TODO Team Member Description
   Our team consists of five members: Dakota Simpkins, Tyler Wallshleger,
   Devin O'Brien, Preston Williamson, and Brandon Kyle.
*** Dakota Simpkins
*** Tyler Wallshleger
*** Devin O'Brien
*** Preston Williamson
*** Brandon Kyle
