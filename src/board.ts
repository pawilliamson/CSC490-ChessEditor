/**
 * This class has a 2D array that will contain the chess pieces as well as methods to move them around, remove them, and add them.
 * 
 */
class Board {
    BOARD_LIMIT: number = 7;
    chessBoard: Piece[][] = new Array;

    printBoard() {
        
    }

    /**
     * This method will remove a Piece at a specified X and Y location on the chess board.
     * 
     * @param xPos 
     * @param yPos 
     */
    remove(xPos: number, yPos: number) {
        if(xPos <= this.BOARD_LIMIT && yPos <= this.BOARD_LIMIT) {
            //$(this.chessBoard[xPos][yPos]).children().remove()

            // Does this work????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
            // ?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
            // ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
            // ???????????????????????????????????????????????????????????????????????????????????????????????
            delete this.chessBoard[xPos][yPos];
        }
        else {
            console.log("Board class tried to remove a Piece out of bounds. Please ensure the location is within bounds. Attempted X Position: " + xPos + "Attempted Y Position: " + yPos);
        }
    }

    /**
     * This method will add a specified piece to a specified X and Y location. Will be used to populate the board, when a pawn becomes a queen, and in the editor.
     * 
     * @param xPos 
     * @param yPos 
     * @param addedPiece 
     */
    add(xPos: number, yPos: number, addedPiece: Piece) {
        if(xPos <= this.BOARD_LIMIT && yPos <= this.BOARD_LIMIT) {
            this.chessBoard[xPos][yPos] = addedPiece;
        }
        else {
            console.log("Board class tried to add a Piece out of bounds. Attempted X Position " + xPos + " Attempted Y Position: " + yPos);
        }
    }

    /**
     * This method will move a piece at a specified X and Y location to different specified X and Y coordinates.
     * 
     * @param initialXPos 
     * @param initialYPos 
     * @param locationXPos 
     * @param locationYPos 
     */
    move(initialXPos: number, initialYPos: number, locationXPos: number, locationYPos: number) {
        if(initialXPos <= this.BOARD_LIMIT && initialYPos <= this.BOARD_LIMIT && locationXPos <= this.BOARD_LIMIT && locationYPos <= this.BOARD_LIMIT) {
            this.chessBoard[locationXPos][locationYPos] = this.chessBoard[initialXPos][initialYPos];
            this.remove(initialXPos, initialYPos);
        }
        else{
            console.log("Board class tried to move a Piece out of bounds, or the location of the Piece to be moved was out of bounds. Attempted beggining X Position: " + initialXPos + " Attempted beggining Y Position: " + initialYPos + " Attempted destination X Position: " + locationXPos + "Attempted destination Y Position: " + locationYPos)
        }
    }

    /**
     * This method will return which Piece is at a specified X and Y location.
     * 
     * @param xPos 
     * @param yPos 
     */
    getPiece(xPos: number, yPos: number) {
        if(xPos <= this.BOARD_LIMIT && yPos <= this.BOARD_LIMIT) {
            return this.chessBoard[xPos][yPos];
        }
        else {
            console.log("Board class tried to return a Piece that was out of bounds. Attempted X Position: " + xPos + " Attempted Y Position: " + yPos);
        }
    }

    /**
     * This method will return the whole chessBoard array.
     * 
     */
    getBoard() {
        return this.chessBoard;
    }
}